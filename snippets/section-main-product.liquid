{{ 'main-product.css' | asset_url | stylesheet_tag }}

{% # components v3.0.1 | Copyright © 2024 Archetype Themes Limited Partnership  | "Shopify Theme Store (https://www.shopify.com/legal/terms#9-additional-services)" License %}
{%- comment -%}
  Main product section

  Accepts:
  - slot {string} - Content for product info
  - product_media_gallery {string} - Content for the product media gallery
  - image_position {string} - Position of the image
  - mobile_layout {string} - Layout for mobile
  - image_container_width {string} - Width of the image container

  Usage:
  {% liquid
    capture blocks
      for block in section.blocks
        case block.type
          when 'description'
            render 'block-description', block: block
        endcase
      endfor
    endcapture

    render 'section-main-product', slot: blocks
  %}
{%- endcomment -%}

{%- liquid
  assign image_position = image_position | default: section.settings.image_position | default: 'left'
  assign mobile_layout = mobile_layout | default: section.settings.mobile_layout | default: 'partial'
  assign image_container_width = image_container_width | default: section.settings.image_container_size | default: 'medium'
  assign product_image_width = 'medium-up--one-half'
  assign product_description_width = 'medium-up--one-half'
  case image_container_width
    when 'small'
      assign product_image_width = 'medium-up--two-fifths'
      assign product_description_width = 'medium-up--three-fifths'
    when 'large'
      assign product_image_width = 'medium-up--three-fifths'
      assign product_description_width = 'medium-up--two-fifths'
  endcase
  capture product_media_gallery_default
    render 'product-images', sizeVariable: product_image_width
  endcapture
-%}

<!-- Print product metafields -->
<div class="json-hidden" data-product-handle="{{ product.handle }}">
  <div class="product-metafields-json" data-metafield="specs">
    {{ product.metafields.descriptors.specs }}
  </div>

  <div class="product-metafields-json" data-metafield="sections">
    {{ product.metafields.descriptors.sections }}
  </div>

  <div class="product-metafields-json" data-metafield="pictograms">
    {{ product.metafields.descriptors.pictograms }}
  </div>
</div>

<script>
		// Afficher les spécifications du produit depuis les metafields
		function show_specs() {
			let data = document.querySelector('[data-product-handle="{{product.handle}}"] [data-metafield="specs"]').innerHTML.trim();
        	console.log("data",data);
			if(data.length == 0)
				return;
	
			let metafields = JSON.parse(data);
			// const specifications = `{{ product.metafields.specifications }}`.replaceAll('=>', ':');
			// let metafields = JSON.parse(specifications);
	
			let caracteristiques = document.querySelector('.product-metafields-caracteristiques');
	
			// const noms = {
			//   "matieres": "Matières",
			//   "poids": "Poids"
			// }
	
			if (caracteristiques) {
				// Create a table with data from the JSON metafields
				let container = document.createElement('div');
				container.className = 'product_specs_container';
	
				// Fill table with key/values from metafields
				for (let key in metafields) {
					let wrapper = document.createElement('div');
					wrapper.classList.add('product_specs_wrapper');
	
					let title = document.createElement('div');
					title.classList.add('product_specs_title');
	
					let value = document.createElement('div');
					value.classList.add('product_specs_value');
	
					title.innerHTML = key;
					value.innerHTML = metafields[key];
	
					wrapper.appendChild(title);
					wrapper.appendChild(value);
	
					container.appendChild(wrapper);

					// Afficher les dimensions
					if(key === 'Dimensions')
					{
						const dimensions = document.querySelector('.variant_dimensions'); 
						
						if(dimensions) 
						{
                          console.log(metafields);
							dimensions.innerHTML = metafields[key];
						}
					}
				}
	
				// Add table to the caracteristiques div
				caracteristiques.appendChild(container);
			}
		}
	
		// Afficher les sections de la page depuis les metafields
		function show_sections() {
			let data = document.querySelector('[data-product-handle="{{product.handle}}"] [data-metafield="sections"]').innerHTML.trim();
        	console.log(data,"productData")
			if(data.length == 0)
				return;
	
			let metafields = JSON.parse(data);
	
			let body = document.querySelector('.product-metafields-sections');
	
			if (body) {
				let i = 0;
				for (let key in metafields) 
				{
					if(metafields[key].title.trim().length == 0 || metafields[key].image.trim().length == 0 || metafields[key].image.trim() === 'null')
						continue;
	
					let image_with_text = document.createElement('div');
					image_with_text.classList.add('feature-section-wrapper');
	
					let position = i % 2 === 0 ? 'left' : 'right';

					const image_url = metafields[key].image.replace('original', '600x600');
	
					image_with_text.innerHTML = `
						<div class="page-width feature-row-wrapper feature-section">
							<div class="feature-row" style="flex-direction: row${position == 'right' ? '-reverse' : ''}">
								<div class="feature-row__text mobile_shown">
								  <p class="h3 text-uppercase">${metafields[key].title}</p>
								</div>
	
								<div class="feature-row__item" style="max-width: 700px">
									<div class="image-wrap">
										<img class="feature-row__image"
											src="${image_url}">
									</div>
								</div>
	
								<div class="feature-row__item feature-row__text feature-row__text--${position} text-${position == 'left'}">
									<p class="h3 text-uppercase mobile_hidden">${metafields[key].title}</p>
									<div class="rte featured-row__subtext">${metafields[key].content}</div>
								</div>
							</div>
						</div>`;
	
					body.appendChild(image_with_text);
					i++;
				}
	
				body.addEventListener('touchend', function() { 
					//metafield_section_scroll(body)
				});
			}
		}
	
		// Afficher les pictogrammes du produit depuis les metafields
		function show_pictograms() {
			let data = document.querySelector('[data-product-handle="{{product.handle}}"] [data-metafield="pictograms"]').innerHTML.trim();
	
			if(data.length == 0)
				return;
	
			let metafields = JSON.parse(data);

			let section = document.querySelector('.product-metafields-pictograms');
	
			if (section && metafields && metafields[0] && metafields[0].split(':').length == 2) {
				// Create a table with data from the JSON metafields
				let container = document.createElement('div');
				container.className = 'product_pictogrammes_container';
	
				// Fill table with key/values from metafields
				for (let field of metafields) {
					let wrapper = document.createElement('div');
					wrapper.className = 'product_pictogrammes_wrapper';
	
					let icon = document.createElement('div');
	
					let img = document.createElement('img');
					img.width = 32;
					img.height = 32;
					img.src = `https://ressources.delsey.com/picto/PC${field.split(':')[0]}.png`;
	
					icon.appendChild(img);
	
					let title = document.createElement('div');
					title.innerHTML = field.split(':')[1];
	
					wrapper.appendChild(icon);
					wrapper.appendChild(title);
					container.appendChild(wrapper);
				}
	
				if (container.children.length > 0) {
					// Add table to the pictograms div
					section.appendChild(container);
				}
			}
		}
	
		// Récupérer les handles depuis le code donné dans le metafield grâce au Storefront API
		async function handles_from_codes(codes)
		{
			// Formatter la requête
			const request = [];
			for (const code of codes)
				request.push(`${code}-*`);
	
			try
			{
				// Effectuer la requête à la Storefront API
				const result = await fetch('/api/2022-04/graphql.json', {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
	
						// Ce token n'est pas secret
						"X-Shopify-Storefront-Access-Token": "2b42d8ff9c65168f04e4648dfb6252eb"
					},
					body: JSON.stringify({
						"query": `
							{
								products(first: 100, query: "${request.join(' OR ')}") {
									edges {
										node {
											handle
                                            title
										}
									}
								}
							}
						`
					})
				});
	
				const data = await result.json();
				
				return data['data']['products']['edges'];
			}
			catch(error)
			{
				console.log(error);
				return null;
			}
		}
	
		// Link les tailles
		async function size_links() 
		{
			// Récupérer tous les autres options de taille
			let inputs = document.querySelector('.variant-input-wrap[data-handle="taille"], .variant-input-wrap[data-handle="size"]');
			if (!inputs) return;
	
			// Désactiver les boutons par défaut
			for(let input of inputs.getElementsByTagName('input')) input.disabled = true;
	
			// Récupérer le code actuel
			const current_code = "{{product.handle}}".split('-')[0];
			[...inputs.querySelectorAll('input')].filter(input => { return input.parentNode.querySelector('.variant_taille_code').innerHTML.trim() == current_code; })[0].checked = "checked";
	
			// Récupérer les autres codes puis handles dynamiquement
			const codes = [];
			for(const code of inputs.querySelectorAll('.variant_taille_code'))
				codes.push(code.innerHTML.trim());
	
			const handles = await handles_from_codes(codes.values());

            //console.log(handles);
	
			// Wrapper les inputs dans des balises <a> menant vers les handles correspondants
			const liens = [];
			const count = inputs.children.length;
			for (let i = 0; i < count;) 
			{
				// Incrémenter seulement si ce n'est pas un input car l'input va être supprimé
				if (inputs.children[i] instanceof HTMLDivElement) 
				{
					const anchor = document.createElement('a');
					anchor.style.display = 'inline-block';
	
					const code = inputs.children[i].parentNode.querySelector('.variant_taille_code').innerHTML.trim();
					const handle = handles.filter((object) => { 
						return object['node']['handle'].startsWith(code); 
					})[0];
                  //console.log(handle);
                  	if(handle)
					{
						if(handle['node']['title'].split(' - ').length > 1 && inputs.children[i])
							inputs.children[i].getElementsByTagName('label')[0].innerHTML = handle['node']['title'].split(' - ').slice(-1);

						const path = '{{ request.path }}';
                        anchor.href = path.split('products/')[0] + 'products/' + handle['node']['handle'];
                        console.log(path.split('products/')[0] + 'products/' + handle['node']['handle']);
					}
					else
					{
						anchor.setAttribute('title', 'Taille indisponible');
                        if (anchor.querySelector('.variant__button-label')) {
                          anchor.querySelector('.variant__button-label').classList.add('option_not_available');
                        }
                        if (inputs.children[i]) {
                          inputs.children[i].classList.add('option_not_available');
                        }
						
					}	

					anchor.appendChild(inputs.children[i]);
	
					liens.push(anchor);
				}
				else 
				{
					i++;
				}
			}
	
			// Remettre tous les liens dans le DOM
			liens.forEach(lien => { inputs.appendChild(lien); });
		}

	// Update shipping days
async function update_shipping_days() {
    const dateElement = document.querySelector('.shipping-days');

    if (!dateElement)
        return;

    const today = new Date();

    // Create dates for +3 and +5 days
    const minDate = new Date(today);
    minDate.setDate(today.getDate() + 3);

    const maxDate = new Date(today);
    maxDate.setDate(today.getDate() + 5);

    // Format both dates
    const options = { day: "2-digit", month: 'long', year: 'numeric' };
    const formattedMin = minDate.toLocaleDateString(Shopify.locale, options);
    const formattedMax = maxDate.toLocaleDateString(Shopify.locale, options);

    // Update the element with the date range
    dateElement.innerHTML = `${formattedMin} - ${formattedMax}`;
}


	
		document.addEventListener("DOMContentLoaded", show_specs);
		document.addEventListener("DOMContentLoaded", show_sections);
		document.addEventListener("DOMContentLoaded", show_pictograms);
		document.addEventListener("DOMContentLoaded", size_links);
		document.addEventListener("DOMContentLoaded", update_shipping_days);
</script>

<div class="json-hidden">
  <div class="theme-settings-json" data-settings="pictograms">
    {{ settings.pictogram_list }}
  </div>
</div>

<section
  class="page-content page-content--product page-content--{{ mobile_layout }}"
  data-section-id="{{ section.id }}"
  data-product-id="{{ product.id }}"
  data-product-handle="{{ product.handle }}"
  data-product-title="{{ product.title | escape }}"
>
  <div class="page-width">
    <div class="product-grid__container product--images float-grid{% unless image_position == 'left' %} grid--product-images-right{% endunless %}{% if mobile_layout == 'partial' %} grid--product-images--partial{% endif %} clearfix">
      {%- if image_position == 'left' -%}
        <div class="grid__item {{ product_image_width }} product-single__sticky">
          {{- product_media_gallery | default: product_media_gallery_default -}}
        </div>
      {%- endif -%}
      <div class="product-grid__content product--description product-single__sticky grid__item {{ product_description_width }}">
        <div class="product-single__meta" data-breadcrumbs>
          {{- slot -}}
        </div>
      </div>
      {%- unless image_position == 'left' -%}
        <div class="grid__item {{ product_image_width }} product-single__sticky">
          {{- product_media_gallery | default: product_media_gallery_default -}}
        </div>
      {%- endunless -%}
    </div>
  </div>
</section>

<script type="application/ld+json">
  {{ product | structured_data }}
</script>
